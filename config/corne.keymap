/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <120>;
            flavor = "balanced";
            hold-trigger-key-positions = <13 14 15 16 19 20 21 22>;
        };

        hold_tap: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <120>;
            flavor = "balanced";
            hold-trigger-key-positions = <36 37 38 39 40 41>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &kp Q            &kp W             &kp F               &kp P              &kp B              &kp J              &kp L                  &kp U               &kp Y             &kp SEMICOLON    &none
&none  &hrm LEFT_ALT A  &hrm RIGHT_GUI R  &hrm LEFT_SHIFT S   &hrm LCTRL T       &kp G              &kp M              &hrm RCTRL N           &hrm RIGHT_SHIFT E  &hrm RIGHT_GUI I  &hrm LEFT_ALT O  &none
&none  &kp Z            &kp X             &kp C               &kp D              &kp V              &kp K              &kp H                  &kp COMMA           &kp DOT           &kp FSLH         &none
                                          &hold_tap 1 ESCAPE  &hold_tap 2 SPACE  &hold_tap 3 TAB    &hold_tap 4 ENTER  &hold_tap 2 BACKSPACE  &hold_tap 5 DELETE
            >;
        };

        num_bt {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none  &bt BT_CLR    &trans        &trans        &trans        &trans          &kp PLUS   &kp N7        &kp N8        &kp N9  &kp KP_MULTIPLY  &none
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp MINUS  &kp N4        &kp N5        &kp N6  &kp FSLH         &none
&none  &trans        &trans        &trans        &trans        &trans          &kp DOT    &kp NUMBER_1  &kp NUMBER_2  &kp N3  &kp EQUAL        &none
                                   &trans        &trans        &trans          &trans     &kp N0        &kp COMMA
            >;
        };

        symb {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none  &kp EXCL      &kp AT        &kp HASH      &kp DLLR      &kp PRCNT      &kp LS(CARET)  &kp LS(AMPS)   &kp LS(STAR)  &kp LS(QMARK)  &kp SQT       &none
&none  &kp LS(PLUS)  &kp EQUAL     &kp LS(LPAR)  &kp LS(RPAR)  &kp LS(DQT)    &kp LS(COLON)  &kp LBKT       &kp RBKT      &kp LS(LBRC)   &kp LS(RBRC)  &none
&none  &kp LS(LT)    &kp LS(PIPE)  &kp MINUS     &kp LS(GT)    &kp BSLH       &kp GRAVE      &kp LS(UNDER)  &kp FSLH      &kp LS(TILDE)  &kp SEMI      &none
                                   &trans        &trans        &trans         &trans         &trans         &trans
            >;
        };

        func {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &kp PRINTSCREEN  &kp F7  &kp F8  &kp F9  &kp F10  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &caps_word       &kp F4  &kp F5  &kp F6  &kp F11  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans           &kp F1  &kp F2  &kp F3  &kp F12  &trans
                        &trans  &trans  &trans    &trans           &trans  &trans
            >;
        };

        nav {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans    &kp END    &kp HOME   &trans     &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans    &kp PG_DN  &kp PG_UP  &trans     &trans  &trans
                        &trans  &trans  &trans    &trans    &trans     &trans
            >;
        };

        media {
            bindings = <
&trans  &trans  &trans      &kp C_VOLUME_UP  &trans            &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp K_PREV  &kp C_VOL_DN     &kp K_NEXT        &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans      &kp K_MUTE       &trans            &trans    &trans  &trans  &trans  &trans  &trans  &trans
                            &trans           &kp K_PLAY_PAUSE  &trans    &trans  &trans  &trans
            >;
        };
    };
};
